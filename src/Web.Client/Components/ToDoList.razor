@using ToDo.Shared
@inject TodoClient _client
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime;

<PageTitle>To do list</PageTitle>

@if (_todoItems != null)
{
    <div class="container m-5 p-2 rounded mx-auto bg-light shadow">
        <!-- App title section -->
        <div class="row m-1 p-4">
            <div class="col">
                <div class="p-1 h1 text-primary text-center mx-auto display-inline-block">
                    <i class="fa fa-check bg-primary text-white rounded p-2"></i>
                    <u>My Todo-s</u>
                </div>
            </div>
        </div>
        <!-- Create todo section -->
        <div class="row m-1 p-3">
            <div class="col col-11 mx-auto">
                <EditForm @ref="@form" Model="@this" OnValidSubmit="@OnCreateNewTodo">
                    <div class="row bg-white rounded shadow-sm p-2 add-todo-wrapper align-items-center justify-content-center">
                        <DataAnnotationsValidator />
                        <div class="col">
                            <InputText autofocus class="form-control form-control-lg border-0 add-todo-input bg-transparent rounded" @bind-Value="@NewTodoTitle" placeholder="Add new .." />
                            <ValidationMessage For="@(() => NewTodoTitle)" />
                        </div>
                        <div class="col-auto m-0 px-2 d-flex align-items-center">
                            <InputDate class="form-control form-control-lg border-0 add-todo-input bg-transparent rounded" @bind-Value="@NewTodoDate" placeholder="Due date" />
                            <ValidationMessage For="@(() => NewTodoTitle)" />
                        </div>
                        <div class="col-auto px-0 mx-0 mr-2">
                            <button type="submit" class="btn btn-primary">Add</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>

        <div class="p-2 mx-4 border-black-25 border-bottom"></div>

        <!-- View options section -->
        <div class="row m-1 p-3 px-5 justify-content-end">
            <div class="col-auto d-flex align-items-center">
                <label class="text-secondary my-2 pr-2 view-opt-label">Filter</label>
                <InputSelect TValue="FilterOption" class="custom-select custom-select-sm btn my-2" ValueExpression="()=>FilterBy" ValueChanged="OnFilterOptionChanged">
                    <option value="@FilterOption.All" selected>All</option>
                    <option value="@FilterOption.Completed">Completed</option>
                    <option value="@FilterOption.Active">Active</option>
                    <option value="@FilterOption.HasDueDate">Has due date</option>
                    <option value="@FilterOption.HasNoDueDate">Has no due date</option>
                </InputSelect>
            </div>
            <div class="col-auto d-flex align-items-center px-1 pr-3">
                <label class="text-secondary my-2 pr-2 view-opt-label">Sort</label>
                <InputSelect TValue="string" class="custom-select custom-select-sm btn my-2" ValueExpression="()=>OrderBy" ValueChanged="OnOrderOptionChanged">
                    <option value="CreatedAt" selected>Added date</option>
                    <option value="DueDate">Due date</option>
                </InputSelect>
                <i @onclick="OnOrderDirectionChanged" class="fa fa fa-sort-amount-@(OrderByDesc? "desc":"asc") text-info btn mx-0 px-0 pl-1" data-toggle="tooltip" data-placement="bottom" title="@(OrderByDesc? "Descending":"Ascending")"></i>
            </div>
        </div>

        <!-- Todo list section -->
        <div class="row mx-1 px-5 pb-3 w-80">
            <div class="col mx-auto">
                @foreach (var todoItem in _todoItems)
                {
                    <div class="row px-3 align-items-center todo-item rounded">
                        <div class="col-auto m-1 p-0 d-flex align-items-center">
                            <h2 class="m-0 p-0">
                                <i @onclick="()=>TagleTodoStatus(todoItem)" class="fa @(todoItem.IsComplete?"fa-check-square-o":"fa-square-o") text-primary btn m-0 p-0" data-toggle="tooltip" data-placement="bottom" title="Mark as @(todoItem.IsComplete?"todo":"complete")"></i>
                            </h2>
                        </div>

                        <div class="col px-1 m-1 d-flex align-items-center">
                            <input type="text" class="form-control form-control-lg border-0 edit-todo-input rounded px-3 bg-transparent" readonly value="@todoItem.Title" title="@todoItem.Title" />
                        </div>

                        <div class="col-auto m-1 p-0 px-3 @(todoItem.DueDate == null? "d-none":"")">
                            <div class="row">
                                <div class="col-auto d-flex align-items-center rounded bg-white border border-warning">
                                    <i class="fa fa-hourglass-2 my-2 px-2 text-warning btn" data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Due on date"></i>
                                    <h6 class="text my-2 pr-2">@todoItem.DueDate?.ToString("dd MMMM yyyy")</h6>
                                </div>
                            </div>
                        </div>

                        <div class="col-auto m-1 p-0 todo-actions">
                            <div class="row todo-created-info">
                                <div class="col-auto d-flex align-items-center pr-2">
                                    <i class="fa fa-info-circle my-2 px-2 text-black-50 btn" data-toggle="tooltip" data-placement="bottom" title="Created date"></i>
                                    <label class="date-label my-2 text-black-50">@todoItem.CreatedAt.ToString("dd MMMM yyyy")</label>
                                </div>
                                <h5 class="m-0 p-0 px-2 d-flex align-items-center">
                                    <i class="fa fa-trash-o text-danger btn m-0 p-0" data-toggle="tooltip" data-placement="bottom" title="Delete todo" @onclick="()=>OnTodoDelete(todoItem)"></i>
                                </h5>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <div>Loading...</div>
}

@code {
    //Add new todo
    EditForm? form;
    private List<TodoItemResponseDto>? _todoItems;
    [Required]
    public string? NewTodoTitle { get; set; }
    public DateTime? NewTodoDate { get; set; }

    //Filter
    FilterOption FilterBy { get; set; }
    string OrderBy { get; set; }
    bool OrderByDesc { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "OnInitializedAsync");
        await LoadItems();
    }

    async Task OnTodoDelete(TodoItemResponseDto todoItem)
    {
        await JSRuntime.InvokeVoidAsync("console.log", "OnTodoDelete");
        if ((await _client.DeleteTodoAsync(todoItem.Id)))
            _todoItems.Remove(todoItem);
    }

    async Task TagleTodoStatus(TodoItemResponseDto todoItem)
    {
        await JSRuntime.InvokeVoidAsync("console.log", "TagleTodoStatus");
        todoItem.IsComplete = !todoItem.IsComplete;
        if (!(await _client.UpdateTodoAsync(todoItem)))
            todoItem.IsComplete = !todoItem.IsComplete;
    }

    async Task OnCreateNewTodo()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "OnCreateNewTodo");
        var createdTodo = await _client.AddTodoAsync(NewTodoTitle, NewTodoDate);
        if (createdTodo is not null)
        {
            NewTodoDate = null;
            NewTodoTitle = null;
            form!.EditContext!.MarkAsUnmodified();
            _todoItems!.Add(createdTodo);
        }
    }

    async Task LoadItems()
    {
        bool? isCompleted = FilterBy switch
        {
            FilterOption.Completed => true,
            FilterOption.Active => false,
            _ => null
        };
        bool? hasDueDate = FilterBy switch
        {
            FilterOption.HasDueDate => true,
            FilterOption.HasNoDueDate => false,
            _ => null
        };

        await JSRuntime.InvokeVoidAsync("console.log", $"LoadItems: FilterBy = {FilterBy}, OrderBy = {OrderBy}, OrderByDesc = {OrderByDesc}");
        _todoItems = await _client.GetTodosAsync(isCompleted, hasDueDate, OrderBy, OrderByDesc);
    }

    async Task OnFilterOptionChanged(FilterOption filterOption)
    {
        FilterBy = filterOption;
        await LoadItems();
    }

    async Task OnOrderOptionChanged(string orderBy)
    {
        OrderBy = orderBy;
        await LoadItems();

    }

    async Task OnOrderDirectionChanged()
    {
        OrderByDesc = !OrderByDesc;
        await LoadItems();
    }

    public enum FilterOption
    {
        All = 0,
        Completed = 1,
        Active = 2,
        HasDueDate = 3,
        HasNoDueDate = 4
    }
}
